generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(cuid())
  clerkId            String              @unique
  email              String              @unique
  firstName          String?
  lastName           String?
  profileImage       String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  deletedAt          DateTime?
  role               UserRole            @default(INTERVIEWER)
  educations         Education[]
  geminiApiLogs      GeminiApiLog[]
  interviewNotes     InterviewNote[]
  interviews         Interview[]
  jobDescriptions    JobDescription[]
  practiceSessions   PracticeSession[]
  profileSkillScores ProfileSkillScore[]
  userProfile        UserProfile?
  userRoleFits       UserRoleFit[]
  workExperiences    WorkExperience[]

  @@index([clerkId])
  @@index([email])
  @@index([role])
  @@index([deletedAt])
  @@map("users")
}

model JobDescription {
  id           String         @id @default(cuid())
  title        String
  company      String?
  description  String
  requirements String[]
  focusAreas   String[]
  isTemplate   Boolean        @default(false)
  userId       String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  companyName  String?
  difficulty   Difficulty     @default(MEDIUM)
  archetypeId  String?
  interviews   Interview[]
  archetype    RoleArchetype? @relation(fields: [archetypeId], references: [id])
  user         User?          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isTemplate])
  @@index([archetypeId])
  @@index([deletedAt])
  @@map("job_descriptions")
}

model Interview {
  id                     String                  @id @default(cuid())
  userId                 String
  jobDescriptionId       String
  status                 InterviewStatus         @default(SCHEDULED)
  scheduledAt            DateTime?
  startedAt              DateTime?
  completedAt            DateTime?
  duration               Int?
  geminiSessionId        String?
  notes                  String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  deletedAt              DateTime?
  endedAt                DateTime?
  geminiConfig           String?
  focusDomainId          String?
  practiceSessionId      String?
  interview_case_id      String?
  conversationTranscript ConversationTranscript?
  interviewNotes         InterviewNote[]
  interviewSkills        InterviewSkill[]
  focusDomain            SkillDomain?            @relation(fields: [focusDomainId], references: [id])
  jobDescription         JobDescription          @relation(fields: [jobDescriptionId], references: [id])
  practiceSession        PracticeSession?        @relation(fields: [practiceSessionId], references: [id])
  user                   User                    @relation(fields: [userId], references: [id])
  mediaRecordings        MediaRecording[]
  questions              Question[]

  @@index([userId])
  @@index([jobDescriptionId])
  @@index([practiceSessionId])
  @@index([focusDomainId])
  @@index([status])
  @@index([scheduledAt])
  @@index([deletedAt])
  @@index([interview_case_id])
  @@map("interviews")
}

model Question {
  id                 String       @id @default(cuid())
  interviewId        String
  questionText       String
  questionType       QuestionType @default(TECHNICAL)
  difficulty         Difficulty   @default(MEDIUM)
  expectedAnswer     String?
  userAnswer         String?
  orderIndex         Int
  timeAsked          DateTime?
  timeAnswered       DateTime?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  evaluationCriteria String?
  followUpQuestions  String?
  timeAllocation     Int?
  interview          Interview    @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  @@index([interviewId])
  @@index([questionType])
  @@index([orderIndex])
  @@map("questions")
}

model InterviewAssessment {
  id                        String                 @id @default(cuid())
  userId                    String
  interviewId               String                 @unique
  caseId                    String
  overallScore              Int
  performanceLabel          String
  whatYouDidBest            String
  topOpportunitiesForGrowth String
  videoUrl                  String?
  videoDurationSeconds      Int?
  videoThumbnailUrl         String?
  startedAt                 DateTime
  completedAt               DateTime
  interviewDurationSeconds  Int
  createdAt                 DateTime?              @default(now())
  updatedAt                 DateTime?              @default(now()) @updatedAt
  feedbackItems             AssessmentFeedback[]
  skillScores               AssessmentSkillScore[]

  @@index([userId])
  @@map("InterviewAssessment")
}

model AssessmentFeedback {
  id                 String              @id @default(cuid())
  assessmentId       String
  feedbackType       String
  timestampDisplay   String
  timestampSeconds   Int
  behaviorTitle      String
  whatYouDid         String
  whyItWorked        String?
  whatWasMissing     String?
  actionableNextStep String?
  impactStatement    String
  displayOrder       Int
  createdAt          DateTime?           @default(now())
  assessment         InterviewAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@index([assessmentId])
  @@map("AssessmentFeedback")
}

model AssessmentSkillScore {
  id            String              @id @default(cuid())
  assessmentId  String
  skillId       String
  skillScore    Int
  categoryOrder Int
  skillOrder    Int
  createdAt     DateTime?           @default(now())
  assessment    InterviewAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  skill         Skill               @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([assessmentId, skillId])
  @@index([assessmentId])
  @@index([skillId])
  @@map("AssessmentSkillScore")
}

model MediaRecording {
  id                  String              @id @default(cuid())
  interviewId         String
  recordingType       RecordingType       @default(SCREEN_AND_AUDIO)
  filePath            String
  fileSize            BigInt
  duration            Int?
  uploadStatus        UploadStatus        @default(UPLOADING)
  transcriptionStatus TranscriptionStatus @default(PENDING)
  transcriptionText   String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  interview           Interview           @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  @@index([interviewId])
  @@index([uploadStatus])
  @@index([transcriptionStatus])
  @@map("media_recordings")
}

model InterviewNote {
  id          String    @id @default(cuid())
  interviewId String
  userId      String
  content     String
  timestamp   DateTime
  positionX   Float?
  positionY   Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])

  @@index([interviewId])
  @@index([userId])
  @@index([timestamp])
  @@map("interview_notes")
}

model ConversationTranscript {
  id          String    @id @default(cuid())
  interviewId String    @unique
  sessionId   String
  model       String
  duration    Int
  turns       Json
  screenshots Json
  analytics   Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  @@index([interviewId])
  @@index([sessionId])
  @@map("conversation_transcripts")
}

model RoleArchetype {
  id                String             @id @default(cuid())
  name              String             @unique
  description       String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  simpleId          Int?               @unique @map("simple_id")
  jobDescriptions   JobDescription[]
  practiceSessions  PracticeSession[]
  roleSkillMappings RoleSkillMapping[]
  roles             Role[]

  @@index([name])
  @@index([deletedAt])
  @@map("role_archetypes")
}

model Role {
  id          String        @id @default(cuid())
  title       String
  archetypeId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  archetype   RoleArchetype @relation(fields: [archetypeId], references: [id], onDelete: Cascade)

  @@unique([archetypeId, title])
  @@index([archetypeId])
  @@index([deletedAt])
  @@map("roles")
}

model SkillDomain {
  id         String      @id @default(cuid())
  name       String      @unique
  order      Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?
  interviews Interview[]
  skills     Skill[]

  @@index([name])
  @@index([order])
  @@index([deletedAt])
  @@map("skill_domains")
}

model Skill {
  id                   String                 @id @default(cuid())
  name                 String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  deletedAt            DateTime?
  domainId             String
  assessmentSkillScores AssessmentSkillScore[]
  interviewSkills       InterviewSkill[]
  profileSkillScores    ProfileSkillScore[]
  roleSkillMappings     RoleSkillMapping[]
  skillLevels           SkillLevel[]
  domain                SkillDomain            @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@unique([domainId, name])
  @@index([domainId])
  @@index([deletedAt])
  @@map("skills")
}

model SkillLevel {
  id                  String    @id @default(cuid())
  skillId             String
  level               Int
  levelName           String
  generalDescription  String
  observableBehaviors String
  exampleResponses    String
  commonMistakes      String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?
  skill               Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([skillId, level])
  @@index([skillId])
  @@index([level])
  @@index([deletedAt])
  @@map("skill_levels")
}

model RoleSkillMapping {
  id          String          @id @default(cuid())
  archetypeId String
  skillId     String
  importance  SkillImportance
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?
  archetype   RoleArchetype   @relation(fields: [archetypeId], references: [id], onDelete: Cascade)
  skill       Skill           @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([archetypeId, skillId])
  @@index([archetypeId])
  @@index([skillId])
  @@index([importance])
  @@index([deletedAt])
  @@map("role_skill_mappings")
}

model InterviewSkill {
  id          String    @id @default(cuid())
  interviewId String
  skillId     String
  isSelected  Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  skill       Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([interviewId, skillId])
  @@index([interviewId])
  @@index([skillId])
  @@index([deletedAt])
  @@map("interview_skills")
}

model PracticeSession {
  id                  String          @id @default(cuid())
  userId              String
  sessionType         String
  jobTitle            String?
  company             String?
  team                String?
  experience          String?
  archetypeId         String?
  requirements        String[]        @default([])
  focusAreas          String[]        @default([])
  difficulty          String?
  extractedInfo       Json?
  originalDescription String?
  createdAt           DateTime        @default(now())
  expiresAt           DateTime
  geminiApiLogs       GeminiApiLog[]
  interviewCases      InterviewCase[]
  interviews          Interview[]
  archetype           RoleArchetype?  @relation(fields: [archetypeId], references: [id])
  user                User            @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([sessionType])
  @@index([archetypeId])
  @@index([expiresAt])
  @@map("practice_sessions")
}

model InterviewCase {
  id                String          @id @default(cuid())
  practiceSessionId String
  caseTitle         String
  caseContext       String
  caseData          Json
  totalDuration     Int
  createdAt         DateTime        @default(now())
  caseQuestions     CaseQuestion[]
  practiceSession   PracticeSession @relation(fields: [practiceSessionId], references: [id], map: "interview_cases_practicesessionid_fkey")

  @@index([practiceSessionId], map: "interview_cases_practicesessionid_idx")
  @@map("interview_cases")
}

model CaseQuestion {
  id                String        @id @default(cuid())
  interviewCaseId   String
  questionText      String
  questionContext   String?
  skillsToEvaluate  String[]      @default([])
  followUpQuestions Json
  orderIndex        Int
  interviewCase     InterviewCase @relation(fields: [interviewCaseId], references: [id], onDelete: Cascade, map: "case_questions_interviewcaseid_fkey")

  @@index([interviewCaseId], map: "case_questions_interviewcaseid_idx")
  @@index([orderIndex], map: "case_questions_orderindex_idx")
  @@map("case_questions")
}

model GeminiApiLog {
  id              String           @id @default(dbgenerated("(gen_random_uuid())::text"))
  timestamp       DateTime         @default(now()) @db.Timestamptz(6)
  userId          String?
  sessionId       String?
  endpoint        String
  prompt          String
  promptLength    Int
  response        Json?
  responseTime    Int?
  jobTitle        String?
  company         String?
  skills          String[]
  modelUsed       String
  success         Boolean
  errorMessage    String?
  metadata        Json?
  createdAt       DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime         @default(now()) @db.Timestamptz(6)
  practiceSession PracticeSession? @relation(fields: [sessionId], references: [id], onUpdate: NoAction)
  user            User?            @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([endpoint], map: "idx_gemini_api_logs_endpoint")
  @@index([sessionId], map: "idx_gemini_api_logs_sessionid")
  @@index([timestamp], map: "idx_gemini_api_logs_timestamp")
  @@index([userId], map: "idx_gemini_api_logs_userid")
  @@map("gemini_api_logs")
}

model Company {
  id              String           @id @default(dbgenerated("(gen_random_uuid())::text"))
  name            String           @unique
  logo            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  workExperiences WorkExperience[]

  @@index([name])
  @@map("companies")
}

model Institution {
  id         String      @id @default(dbgenerated("(gen_random_uuid())::text"))
  name       String      @unique
  logo       String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  educations Education[]

  @@index([name])
  @@map("institutions")
}

model UserProfile {
  id           String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId       String   @unique
  currentTitle String?
  location     String?
  summary      String?
  linkedinUrl  String?
  githubUrl    String?
  portfolioUrl String?
  isPublic     Boolean  @default(false)
  profileSlug  String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([profileSlug], map: "user_profiles_profileslug_idx")
  @@map("user_profiles")
}

model UserRoleFit {
  id           String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId       String
  roleTitle    String
  fitLevel     FitLevel
  displayOrder Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId, displayOrder], map: "user_role_fits_userid_displayorder_idx")
  @@map("user_role_fits")
}

model ProfileSkillScore {
  id        String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId    String
  skillId   String
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  skill     Skill    @relation(fields: [skillId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, skillId])
  @@index([userId], map: "profile_skill_scores_userid_idx")
  @@map("profile_skill_scores")
}

model WorkExperience {
  id           String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId       String
  companyId    String
  title        String
  startDate    DateTime
  endDate      DateTime?
  description  String
  tags         String[]  @default([])
  location     String?
  displayOrder Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  company      Company   @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId, displayOrder], map: "work_experiences_userid_displayorder_idx")
  @@map("work_experiences")
}

model Education {
  id            String      @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId        String
  institutionId String
  degree        String
  fieldOfStudy  String
  startYear     Int
  endYear       Int?
  description   String?
  displayOrder  Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          User        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId, displayOrder], map: "educations_userid_displayorder_idx")
  @@map("educations")
}

enum FeedbackType {
  STRENGTH
  GROWTH_AREA
}

enum InterviewStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum QuestionType {
  TECHNICAL
  BEHAVIORAL
  CASE_STUDY
  PROBLEM_SOLVING
  SYSTEM_DESIGN
}

enum SessionType {
  JOB_DESCRIPTION
  ROLE_SELECTION
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  JUNIOR
  SENIOR
}

enum RecordingType {
  SCREEN
  AUDIO
  SCREEN_AND_AUDIO
}

enum UploadStatus {
  UPLOADING
  COMPLETED
  FAILED
}

enum TranscriptionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum UserRole {
  ADMIN
  INTERVIEWER
}

enum SkillImportance {
  LOW
  MEDIUM
  HIGH
}

enum FitLevel {
  VERY_HIGH
  HIGH
  MEDIUM
  LOW
}
