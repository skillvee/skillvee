generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String                @id @default(cuid())
  clerkId          String                @unique
  email            String                @unique
  firstName        String?
  lastName         String?
  profileImage     String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  deletedAt        DateTime?
  role             UserRole              @default(INTERVIEWER)
  interviewNotes   InterviewNote[]
  interviews       Interview[]
  jobDescriptions  JobDescription[]
  skillAssessments UserSkillAssessment[]

  @@index([clerkId])
  @@index([email])
  @@index([role])
  @@index([deletedAt])
  @@map("users")
}

model JobDescription {
  id           String         @id @default(cuid())
  title        String
  company      String?
  description  String
  requirements String[]
  focusAreas   String[]
  isTemplate   Boolean        @default(false)
  userId       String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  companyName  String?
  difficulty   Difficulty     @default(MEDIUM)
  archetypeId  String?
  interviews   Interview[]
  archetype    RoleArchetype? @relation(fields: [archetypeId], references: [id])
  user         User?          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isTemplate])
  @@index([archetypeId])
  @@index([deletedAt])
  @@map("job_descriptions")
}

model Interview {
  id                   String                @id @default(cuid())
  userId               String
  jobDescriptionId     String
  status               InterviewStatus       @default(SCHEDULED)
  scheduledAt          DateTime?
  startedAt            DateTime?
  completedAt          DateTime?
  duration             Int?
  geminiSessionId      String?
  notes                String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedAt            DateTime?
  endedAt              DateTime?
  geminiConfig         String?
  focusDomainId        String?
  assessment           Assessment?
  interviewNotes       InterviewNote[]
  interviewSkills      InterviewSkill[]
  focusDomain          SkillDomain?          @relation(fields: [focusDomainId], references: [id])
  jobDescription       JobDescription        @relation(fields: [jobDescriptionId], references: [id])
  user                 User                  @relation(fields: [userId], references: [id])
  mediaRecordings      MediaRecording[]
  questions            Question[]
  userSkillAssessments UserSkillAssessment[]

  @@index([userId])
  @@index([jobDescriptionId])
  @@index([focusDomainId])
  @@index([status])
  @@index([scheduledAt])
  @@index([deletedAt])
  @@map("interviews")
}

model Question {
  id                 String       @id @default(cuid())
  interviewId        String
  questionText       String
  questionType       QuestionType @default(TECHNICAL)
  difficulty         Difficulty   @default(MEDIUM)
  expectedAnswer     String?
  userAnswer         String?
  orderIndex         Int
  timeAsked          DateTime?
  timeAnswered       DateTime?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  evaluationCriteria String?
  followUpQuestions  String?
  timeAllocation     Int?
  interview          Interview    @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  @@index([interviewId])
  @@index([questionType])
  @@index([orderIndex])
  @@map("questions")
}

model Assessment {
  id                   String    @id @default(cuid())
  interviewId          String    @unique
  overallScore         Int
  technicalScore       Int
  communicationScore   Int
  problemSolvingScore  Int
  strengthsAnalysis    String
  improvementAreas     String
  detailedFeedback     String
  recommendedNextSteps String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  interview            Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  @@index([interviewId])
  @@index([overallScore])
  @@map("assessments")
}

model MediaRecording {
  id                  String              @id @default(cuid())
  interviewId         String
  recordingType       RecordingType       @default(SCREEN_AND_AUDIO)
  filePath            String
  fileSize            BigInt
  duration            Int?
  uploadStatus        UploadStatus        @default(UPLOADING)
  transcriptionStatus TranscriptionStatus @default(PENDING)
  transcriptionText   String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  interview           Interview           @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  @@index([interviewId])
  @@index([uploadStatus])
  @@index([transcriptionStatus])
  @@map("media_recordings")
}

model InterviewNote {
  id          String    @id @default(cuid())
  interviewId String
  userId      String
  content     String
  timestamp   DateTime
  positionX   Float?
  positionY   Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])

  @@index([interviewId])
  @@index([userId])
  @@index([timestamp])
  @@map("interview_notes")
}

model RoleArchetype {
  id                String             @id @default(cuid())
  name              String             @unique
  description       String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  jobDescriptions   JobDescription[]
  roleSkillMappings RoleSkillMapping[]
  roles             Role[]

  @@index([name])
  @@index([deletedAt])
  @@map("role_archetypes")
}

model Role {
  id          String        @id @default(cuid())
  title       String
  archetypeId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  archetype   RoleArchetype @relation(fields: [archetypeId], references: [id], onDelete: Cascade)

  @@unique([archetypeId, title])
  @@index([archetypeId])
  @@index([deletedAt])
  @@map("roles")
}

model SkillDomain {
  id         String      @id @default(cuid())
  name       String      @unique
  order      Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?
  interviews Interview[]
  skills     Skill[]

  @@index([name])
  @@index([order])
  @@index([deletedAt])
  @@map("skill_domains")
}

model Skill {
  id                   String                @id @default(cuid())
  name                 String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedAt            DateTime?
  domainId             String
  interviewSkills      InterviewSkill[]
  roleSkillMappings    RoleSkillMapping[]
  skillLevels          SkillLevel[]
  domain               SkillDomain           @relation(fields: [domainId], references: [id], onDelete: Cascade)
  userSkillAssessments UserSkillAssessment[]

  @@unique([domainId, name])
  @@index([domainId])
  @@index([deletedAt])
  @@map("skills")
}

model SkillLevel {
  id                  String    @id @default(cuid())
  skillId             String
  level               Int
  levelName           String
  generalDescription  String
  observableBehaviors String
  exampleResponses    String
  commonMistakes      String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?
  skill               Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([skillId, level])
  @@index([skillId])
  @@index([level])
  @@index([deletedAt])
  @@map("skill_levels")
}

model RoleSkillMapping {
  id          String          @id @default(cuid())
  archetypeId String
  skillId     String
  importance  SkillImportance
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?
  archetype   RoleArchetype   @relation(fields: [archetypeId], references: [id], onDelete: Cascade)
  skill       Skill           @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([archetypeId, skillId])
  @@index([archetypeId])
  @@index([skillId])
  @@index([importance])
  @@index([deletedAt])
  @@map("role_skill_mappings")
}

model InterviewSkill {
  id          String    @id @default(cuid())
  interviewId String
  skillId     String
  isSelected  Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  skill       Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([interviewId, skillId])
  @@index([interviewId])
  @@index([skillId])
  @@index([deletedAt])
  @@map("interview_skills")
}

model UserSkillAssessment {
  id             String     @id @default(cuid())
  userId         String
  skillId        String
  currentLevel   Int?
  assessmentDate DateTime   @default(now())
  interviewId    String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deletedAt      DateTime?
  interview      Interview? @relation(fields: [interviewId], references: [id])
  skill          Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId, interviewId])
  @@index([userId])
  @@index([skillId])
  @@index([interviewId])
  @@index([currentLevel])
  @@index([deletedAt])
  @@map("user_skill_assessments")
}

enum InterviewStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum QuestionType {
  TECHNICAL
  BEHAVIORAL
  CASE_STUDY
  PROBLEM_SOLVING
  SYSTEM_DESIGN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  JUNIOR
  SENIOR
}

enum RecordingType {
  SCREEN
  AUDIO
  SCREEN_AND_AUDIO
}

enum UploadStatus {
  UPLOADING
  COMPLETED
  FAILED
}

enum TranscriptionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum UserRole {
  ADMIN
  INTERVIEWER
}

enum SkillImportance {
  LOW
  MEDIUM
  HIGH
}
